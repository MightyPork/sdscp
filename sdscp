#!/bin/env python3

import sys
import argparse
import math
import re
import traceback

from macros import MacroProcessor
from tokens import Tokenizer
from readers import CodeReader

# ==================== Command Line Arguments processing =======================

parser = argparse.ArgumentParser(description='SDS-C macro preprocessor')

parser.add_argument(
	'source',
	help='The source file to process'
)
parser.add_argument(
	'-o', '--output',
	help='The output file; If not specified, output will be printed to console.'
)
parser.add_argument(
		'-v', '--verbose',
		action='store_true',
		default=False,
		help='Show various stages of the processing, for debug.'
)
parser.add_argument(
		'-x', '--experimental',
		action='store_true',
		default=False,
		help='Enable experimental features.'
)
parser.add_argument(
		'-c', '--clean',
		action='store_true',
		default=False,
		help='Remove some whitespace and all comments'
)
parser.add_argument(
		'-m', '--macros',
		action='store_true',
		default=False,
		help='List all macros (even if not verbose)'
)
parser.add_argument(
		'-n', '--no-output',
		action='store_true',
		default=False,
		help='Do not show the compiled source (if no output is specified and not verbose)'
)

args = parser.parse_args()


SRC = args.source
DEST = args.output
VERBOSE = args.verbose
EXPERIMENTAL = args.experimental
CLEAN = args.clean
SHOW_MACROS = args.macros
NO_OUTPUT_DUMP = args.no_output


# ==================== Utils =======================


def banner(text, fill='-', length=80):
	""" Show a banner line """
	blob = (fill*length + ' ' + text + ' ' + fill*length)
	overlap = len(blob)-80
	print('\n' + blob[ math.floor(overlap/2) : math.floor(-overlap/2)] + '\n')



def prepare_for_sdsc(code):
	""" Do some finishing touches to the syntax """
	rd = CodeReader(code)

	out = ''

	while not rd.has_end():

		if rd.has_inline_comment():
			out += rd.consume_inline_comment()
			continue

		elif rd.has_block_comment():
			out += rd.consume_block_comment()
			continue

		elif rd.has_string():
			# collect whole string
			# convert quotes to apos
			s = rd.consume_string()
			s = s[1:-1]

			if s.count("'") > 0:
				raise SyntaxError('Sorry, SDS-C compiler is TOO STUPID to handle \' in string.')

			s = re.sub(r'\\"', '"', s)

			out += "'%s'" % s
			continue

		elif rd.has_char():
			# collect whole char literal
			out += rd.consume_char()
			continue

		elif rd.has_identifier():
			# remove empty paren after function name
			out += rd.consume_identifier()
			out += rd.consume_whitespace()

			if rd.has_paren():
				pp = rd.get_pos()
				paren = rd.consume_block()

				if re.match(r'\(\s*\)', paren):
					after = rd.consume_whitespace()
					if rd.has_code_block():
						# omit the empty paren
						out += after
					else:
						out += paren
						out += after
				else:
					rd.move_to(pp) # go back

			elif rd.has_bracket():
				# collect whole bracket

				br = rd.consume_block()
				br_in = br[1:-1].strip()

				if re.match(r'^\([a-zA-Z_][a-zA-Z0-9_]*\)$', br_in):
					br_in = br_in[1:-1]
				elif re.match(r'^\((?:0x|0b)?[0-9]+\)$', br_in):
					br_in = br_in[1:-1]
				elif re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', br_in):
					pass
				elif re.match(r'^(?:0x|0b)?[0-9]+$', br_in):
					pass
				else:
					raise SyntaxError('Sorry, %s appears to be invalid array index for SDS-C.' % br_in)

				out += '[%s]' % br_in

			continue

		else:
			# any other char is just used the same
			out += rd.consume()

	return out



# ==================== MAIN TASK =======================

try:

	banner('SDS-C Plus', ':')

	print('Reading file:', SRC)

	# read the file
	mp = MacroProcessor(SRC)
	mp.keep_comments = not CLEAN


	# ---------------- Resolve directives ------------------
	print('Resolving #directives...')


	# include files, resolve branching, find macros...
	mp.process()


	if VERBOSE:
		banner('Cleaned source', '-')

		print( mp.get_output() )
		print()


	if VERBOSE or SHOW_MACROS:

		banner('MACROS FOUND', '-')
		for d in mp.get_defines().values():
			print(d)



	# -------------------- Apply macros --------------------
	print('Applying macro replacements...')


	# perform macro replacements
	mp.apply_macros()
	# get output code
	processed = mp.get_output()


	if VERBOSE and not NO_OUTPUT_DUMP:
		banner('PROCESSED', '-')
		print(processed)


	if EXPERIMENTAL:
		banner('EXPERIMENTAL TOKEN TREE', '-')
		print('Experimental tokenization of the code:\n')

		tk = Tokenizer(processed)
		tk.tokenize()
		tk.show()

	else:
		# perform tweaks to match some of SDS-C's broken syntax
		for_sds = prepare_for_sdsc(processed)

		if not NO_OUTPUT_DUMP:
			banner('CODE FOR SDS-C', '-')
			print(for_sds+'\n')

		if DEST != None:
			print('Writing to file: %s' % DEST)
			f = open(DEST, 'w')
			f.write(for_sds)
			f.close()

	print('\nDone.\n')

except SyntaxError as e:
	banner('SYNTAX ERROR', '#')
	type_, value_, traceback_ = sys.exc_info()
	ex = traceback.format_exception(type_, value_, traceback_)
	for line in ex:
		# discard useless junk
		if 'raise SyntaxError' in line:
			continue
		if 'File "<string>", line None' in line:
			continue

		print(line)

