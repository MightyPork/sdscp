#!/bin/env python3

import sys
import argparse
import math

from macros import MacroProcessor
from tokens import Tokenizer


parser = argparse.ArgumentParser(description='SDS-C macro preprocessor')

parser.add_argument(
	'source',
	help='The source file to process'
)
parser.add_argument(
	'-o', '--output',
	help='The output file; If not specified, output will be printed to console.'
)
parser.add_argument(
		'-v', '--verbose',
		action='store_true',
		default=False,
		help='Show various stages of the processing, for debug.'
)

args = parser.parse_args()


SRC = args.source
DEST = args.output
VERBOSE = args.verbose


def banner(text, fill='-', length=80):
	blob = (fill*length + ' ' + text + ' ' + fill*length)
	overlap = len(blob)-80
	print('\n' + blob[ math.floor(overlap/2) : math.floor(-overlap/2)] + '\n')



banner('SDS-C Plus', ':')
print('Reading file:', SRC)

# read the file

mp = MacroProcessor(SRC)

print('Resolving #directives...')

mp.process()


if VERBOSE:
	banner('Cleaned source', '-')

	print( mp.get_output() )
	print()
	banner('MACROS FOUND', '-')
	for d in mp.get_defines().values():
		print(d)


print('Applying macro replacements...')

mp.apply_macros()

processed = mp.get_output()

if VERBOSE:
	banner('OUTPUT', '-')
	print(processed)
	print()

	print('Experimental tokenization...')

	banner('TOKEN TREE', '-')
	print('!!! EXPERIMENTAL !!!\n')

	tk = Tokenizer(processed)
	tk.tokenize()
	tk.show()

if DEST == None:
	banner('OUTPUT', '-')
	print(processed)
else:
	print('Writing to file: %s' % DEST)
	f = open(DEST, 'w')
	f.write(processed)
	f.close()
