#!/bin/env python3

import sys
import argparse
import math

from macros import MacroProcessor
from tokens import Tokenizer


parser = argparse.ArgumentParser(description='SDS-C macro preprocessor')
parser.add_argument('source', help='The source file to process')
parser.add_argument('-o', '--output', help='The output file; If not specified, output will be printed to console.')


args = parser.parse_args()

def banner(text, fill='-', length=80):
	blob = (fill*length + ' ' + text + ' ' + fill*length)
	overlap = len(blob)-80
	print('\n' + blob[ math.floor(overlap/2) : math.floor(-overlap/2)] + '\n')



banner('SDS-C Plus', ':')
print('Source:', args.source)

# read the file

mp = MacroProcessor(args.source)

print('Resolving #directives...')

mp.process()

banner('Cleaned source', '-')

print( mp.get_output() )
print()


banner('MACROS FOUND', '-')

for d in mp.get_defines().values():
	print(d)


print('Applying macro replacements...')

mp.apply_macros()

banner('OUTPUT', '-')
print( mp.get_output() )
print()


print('Experimental tokenization...')

banner('TOKEN TREE', '-')
print('!!! EXPERIMENTAL !!!\n')

tk = Tokenizer( mp.get_output() )
tk.tokenize()
tk.show()
